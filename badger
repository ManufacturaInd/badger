#!/usr/bin/env python

# TODO
# - implement figlet import
# - generate a full specimen of available bitmap fonts
# - the same with figlet fonts

import sys, os
import click
from PIL import Image, ImageFont, ImageDraw

FONT_DIR = os.path.expanduser("~/.badger/pil-fonts/")

def list_fonts(ctx, value):
    if not value:
        return
    import glob, os
    file_list = glob.glob(os.path.join(FONT_DIR, "*.pil"))
    file_list.sort()
    from pprint import pprint
    for f in file_list:
        file_name = os.path.basename(f)
        font_name = file_name.split('.')[0]
	print font_name
    ctx.exit()

def list_figlet_fonts(ctx, value):
    pass

@click.command()
@click.argument("filename")
@click.option('-o', '--outfilename', default="", help='Output filename. Defaults to the original filename with the PNG extension.')
@click.option('-f', '--font', default="4x6", help='Font name to use. Use -l for a list. (default: 4x6)')
@click.option('-e', '--leading', default="0", help='Extra spacing between lines. (default: 0)', type=click.INT)
@click.option('-r', '--tracking', default="0", help='Extra spacing between characters. (default: 0)', type=click.INT)
@click.option('-t', '--textcolor', default="#000000", help='Text color.')
@click.option('-b', '--bgcolor', default="", help='Background color.')
@click.option('-w', '--width', default="80", help='Width in characters when converting images.', type=click.INT)
@click.option('-F', '--figlet', default=None, help='[not implemented] Render a string with figlet.')
@click.option('-T', '--figlet-font', default='shimrod', help='[not implemented] Figlet font to use. (only used with -F)')
@click.option('-l', '--list-fonts', is_flag=True, help='Show available fonts and exit.', callback=list_fonts,
              expose_value=False, is_eager=True)
@click.option('-L', '--list-figlet-fonts', is_flag=True, help='Show available Figlet fonts and exit.', callback=list_figlet_fonts,
              expose_value=False, is_eager=True)
def txt2img(outfilename, filename, font, leading, tracking, bgcolor, textcolor, width, figlet, figlet_font):
    # load the font
    fontpath = os.path.join(FONT_DIR, "%s.pil" % font)
    try:
        font = ImageFont.load(fontpath)
    except (IOError, OSError) as err:
        print("Could not find or use the font " + font + " (after looking for it at " + fontpath + " ).")
        print("The actual error was: " + format(err))
        sys.exit()

    # is the source file an image? If so, convert to text first
    import magic
    from subprocess import Popen, call, check_output, PIPE
    mimetype = magic.from_file(filename, mime=True)
    if mimetype.startswith('image'):
        # test for jp2a
        try:
            call(['jp2a', '--version'])
        except OSError:
            print "You don't seem to have jp2a installed. On Debian systems, try 'sudo aptitude install jp2a'."
            print "You can still run badger on text files, but I need jp2a to be able to convert images."
            sys.exit()
        if not mimetype[-3:] in ('jpg', 'jpeg'):
            # test for imagemagick
            try:
                call(['convert', ' -version'])
            except OSError:
                print "You don't seem to have ImageMagick installed. On Debian systems, try 'sudo aptitude install imagemagick'."
                print "I can work without it, as long as you feed me JPEG files."
                sys.exit()
            # jp2a needs a jpeg file, use convert and go
            text = Popen('convert %s jpg:- | jp2a - --width=%d' % (filename, width),
                            shell=True, stdout=PIPE).communicate()[0]
        else:
            # we got a jpeg, this is easy
            text = Popen('jp2a %s --width=%d' % (filename, width), 
                            shell=True, stdout=PIPE).communicate()[0]
        lines = text.split('\n')
    else:
        # not an image, let's read it as a text file since possible extensions are plenty
        text = open(filename, 'r')
        lines = text.readlines()

    # determine font sizes
    fw, fh = font.getsize('M')
    
    # find longest line to determine width
    # this beautiful line came from http://stackoverflow.com/a/873333
    max_chars = max(lines, key=len)
    # now determine image size
    try:
        width, line_height = font.getsize(max_chars)
    except TypeError:
        print "Error with file %s. Traceback follows." % filename
        raise
    height = line_height*len(lines) + max(0,int(leading))*len(lines)
    if bgcolor:
        image = Image.new("RGBA", (width, height), color=bgcolor)
    else:
        image = Image.new("RGBA", (width, height))
    draw = ImageDraw.Draw(image)

    i = 0
    for line in lines:
        if not tracking:
            draw.text((0, i), line, font=font, fill=textcolor)
        else:
            # applying tracking requires char by char output
            char_count = 0
            for char in line:
                draw.text((char_count*(fw+int(tracking)), i), char, font=font, fill=textcolor)
                char_count += 1
        i += fh + int(leading)

    if outfilename:
        outfile = outfilename
    else:
        outfile = "%s.png" % os.path.splitext(filename)[0]
        # if the input file is a png, don't overwrite and save with a different name
        if os.path.exists(outfile) and os.path.splitext(filename)[1] == '.png':
            outfile = os.path.splitext(outfile)[0] + '_output.png'
    try:
        image.save(outfile)
    except SystemError:
        print "Failed while trying to save image with dimensions %dx%d. Traceback follows." % (width, height)
        print
        raise


if __name__ == "__main__":
    txt2img()
